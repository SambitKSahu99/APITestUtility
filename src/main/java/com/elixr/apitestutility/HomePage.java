/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.elixr.apitestutility;

import static com.elixr.apitestutility.Screen2.showErrorDialog;
import java.awt.BorderLayout;
import java.awt.Cursor;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.BorderFactory;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTree;
import javax.swing.border.TitledBorder;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreePath;
import org.apache.poi.ss.usermodel.Cell;
import static org.apache.poi.ss.usermodel.CellType.BOOLEAN;
import static org.apache.poi.ss.usermodel.CellType.FORMULA;
import static org.apache.poi.ss.usermodel.CellType.NUMERIC;
import static org.apache.poi.ss.usermodel.CellType.STRING;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.json.JSONObject;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 *
 * @author sambit.sahu
 */
public class HomePage extends javax.swing.JFrame {

    private static final Logger logger = LoggerFactory.getLogger(HomePage.class);
    private JTree fileTree;
    private DefaultTreeModel treeModel;
    private String url = "";
    private String method = "";
    private String headers = "";
    private List<Object[]> testCases;
    private String fileName = "";
    private Screen3Frame screen3Instance;

    /**
     * Creates new form HomePage
     */
    public HomePage() {
        initComponents();
        fileBrowser();
        setUpFrame();
    }

    private void setUpFrame() {
        setExtendedState(MAXIMIZED_BOTH);
        setLocationRelativeTo(this);
        setScrollPane();

    }

    private void setScrollPane() {
        existingTestListScrollPane.setBorder(BorderFactory.createTitledBorder(
                BorderFactory.createEtchedBorder(), "Select Test",
                TitledBorder.LEADING, TitledBorder.TOP,
                new Font("Arial", Font.BOLD, 14)));
        existingTestDeatilsScrollPane.setBorder(BorderFactory.createTitledBorder(
                BorderFactory.createEtchedBorder(), "Selected Test Details",
                TitledBorder.LEADING, TitledBorder.TOP,
                new Font("Arial", Font.BOLD, 14)));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        topPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        testBtn = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        submitBtn = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        existingTestListScrollPane = new javax.swing.JScrollPane();
        existingTestDeatilsScrollPane = new javax.swing.JScrollPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setLocation(new java.awt.Point(0, 0));
        setMinimumSize(getPreferredSize());

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setText("API Test Utility");

        testBtn.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        testBtn.setText("Test");
        testBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                testBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout topPanelLayout = new javax.swing.GroupLayout(topPanel);
        topPanel.setLayout(topPanelLayout);
        topPanelLayout.setHorizontalGroup(
                topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(topPanelLayout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(testBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(22, 22, 22))
        );
        topPanelLayout.setVerticalGroup(
                topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(topPanelLayout.createSequentialGroup()
                                .addGroup(topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel1)
                                        .addComponent(testBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(0, 0, Short.MAX_VALUE))
        );

        submitBtn.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        submitBtn.setText("Submit Test");
        submitBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitBtnActionPerformed(evt);
            }
        });
        jPanel2.add(submitBtn);

        jButton1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton1.setText("EXIT");
        jPanel2.add(jButton1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addContainerGap())
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(32, 32, 32)
                                .addComponent(existingTestListScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(existingTestDeatilsScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 310, Short.MAX_VALUE)
                                .addGap(26, 26, 26))
                        .addGroup(layout.createSequentialGroup()
                                .addComponent(topPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addContainerGap())
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(topPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(existingTestListScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 359, Short.MAX_VALUE)
                                        .addComponent(existingTestDeatilsScrollPane))
                                .addGap(18, 18, 18)
                                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(14, 14, 14))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void submitBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitBtnActionPerformed
        // TODO add your handling code here:
        if (url.equals("") || method.equals("")) {
            logger.warn("Some mandatory fields are missing");
            JOptionPane.showMessageDialog(this, "Some mandatory fields are missing", "ERROR MESSAGE", JOptionPane.ERROR_MESSAGE);
        }
        Object[][] testScenarios = testCases.toArray(new Object[0][0]);
        if (screen3Instance != null) {
            screen3Instance.dispose();
        }
        screen3Instance = new Screen3Frame(this, url, method, headers, testScenarios, fileName);
        screen3Instance.setVisible(true);
        dispose();
    }//GEN-LAST:event_submitBtnActionPerformed

    private void testBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_testBtnActionPerformed
        // TODO add your handling code here:
        JPopupMenu popupMenu = new JPopupMenu();
        JMenuItem createTest = new JMenuItem("Create New Test");
        JMenuItem importTest = new JMenuItem("Import");
        popupMenu.add(createTest);
        popupMenu.add(importTest);
        popupMenu.show(testBtn, -popupMenu.getPreferredSize().width, testBtn.getHeight());
        createTest.addActionListener((ActionEvent e) -> {
            Screen1 screen1 = new Screen1(this);
            screen1.setVisible(true);
            this.dispose();
        });
        importTest.addActionListener((ActionEvent e) -> {
            openImportTest();
        });
    }//GEN-LAST:event_testBtnActionPerformed

    private void openImportTest() {
        JPanel panel = new JPanel(new BorderLayout());
        JLabel label = new JLabel("Enter cURL Command:");
        JTextArea textArea = new JTextArea(5, 40);  // Multi-line input field
        JScrollPane scrollPane = new JScrollPane(textArea);
        panel.add(label, BorderLayout.NORTH);
        panel.add(scrollPane, BorderLayout.CENTER);
        // Show input dialog
        int result = JOptionPane.showConfirmDialog(
                null, panel, "Import Test", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE
        );
        // If user presses OK, process the entered cURL command
        if (result == JOptionPane.OK_OPTION) {
            String curlCommand = textArea.getText().trim();
            if (!curlCommand.isEmpty()) {
                processCurlCommand(curlCommand); // Call the method to process cURL
            } else {
                JOptionPane.showMessageDialog(null, "Please enter a valid cURL command!", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    private void processCurlCommand(String curlCommand) {
        curlCommand = curlCommand.replace("\\\n", "");  // Remove line breaks for better parsing

        // Extract URL
        Pattern urlPattern = Pattern.compile("curl.*?['\"]?(https?://[^\\s'\"]+)['\"]?");
        Matcher urlMatcher = urlPattern.matcher(curlCommand);
        String curlURL = urlMatcher.find() ? urlMatcher.group(1) : "Not Found";

        // Extract HTTP Method
        Pattern methodPattern = Pattern.compile("-X\\s+(\\w+)");
        Matcher methodMatcher = methodPattern.matcher(curlCommand);
        String httpMethod;

        if (methodMatcher.find()) {
            httpMethod = methodMatcher.group(1); // Extract method if found
        } else if (curlCommand.contains("--data") || curlCommand.contains("--data-binary")) {
            httpMethod = "POST"; // If --data is present, assume POST
        } else {
            httpMethod = "GET"; // Default to GET
        }
        Map<String, String> curlHeaders = new LinkedHashMap<>();
        Pattern headerPattern = Pattern.compile("--header\\s+['\"]?([^:]+):\\s*([^'\"]*)['\"]?");
        Matcher headerMatcher = headerPattern.matcher(curlCommand);
        while (headerMatcher.find()) {
            curlHeaders.put(headerMatcher.group(1), headerMatcher.group(2));
        }

        // Extract Request Body (Handles multi-line JSON)
        Pattern bodyPattern = Pattern.compile("--data(?:-raw)?\\s+['\"](.*)['\"]", Pattern.DOTALL);
        Matcher bodyMatcher = bodyPattern.matcher(curlCommand);
        String requestBody = bodyMatcher.find() ? bodyMatcher.group(1).replace("\n", "") : "No Body";

        // Format JSON body (if applicable)
        try {
            requestBody = new JSONObject(requestBody).toString(4);  // Pretty print JSON
        } catch (Exception e) {
            // Ignore if it's not a valid JSON
        }
        Screen1 screen1 = new Screen1(this,curlURL,httpMethod,curlHeaders,requestBody);
        screen1.setVisible(true);
        dispose();
    }

    private void fileBrowser() {
        File rootFile = new File(System.getProperty("user.dir"));
        DefaultMutableTreeNode rootNode = new DefaultMutableTreeNode(rootFile.getName());
        treeModel = new DefaultTreeModel(rootNode);
        populateFileTree(rootFile, rootNode);
        fileTree = new JTree(treeModel);
        fileTree.setRootVisible(true);
        fileTree.setShowsRootHandles(true);
        fileTree.setBackground(existingTestListScrollPane.getBackground());
        existingTestListScrollPane.setViewportView(fileTree);
        existingTestListScrollPane.revalidate();
        existingTestListScrollPane.repaint();
        fileTree.addTreeSelectionListener((TreeSelectionEvent e) -> {
            DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) fileTree.getLastSelectedPathComponent();
            if (selectedNode != null) {
                System.out.println("Selected: " + selectedNode.getUserObject());
                TreePath treePath = fileTree.getSelectionPath();
                if (treePath != null) {
                    String fullPath = buildFullPath(treePath);
                    File selectedFile = new File(fullPath);
                    if (selectedFile.isFile()) {
                        processFile(selectedFile);
                    }
                }
            }
        });
    }

    private String buildFullPath(TreePath treePath) {
        StringBuilder fullPath = new StringBuilder(System.getProperty("user.dir")); // Root directory
        Object[] pathElements = treePath.getPath();
        for (int i = 1; i < pathElements.length; i++) { // Skip root node
            fullPath.append(File.separator).append(pathElements[i].toString());
        }
        return fullPath.toString();
    }

    private void populateFileTree(File file, DefaultMutableTreeNode node) {
        if (file.isDirectory()) {
            File[] files = file.listFiles((dir, name) -> {
                return new File(dir, name).isDirectory()
                        || name.toLowerCase().endsWith(".xls")
                        || name.toLowerCase().endsWith(".xlsx")
                        || name.toLowerCase().endsWith(".csv");
            });

            if (files != null) {
                for (File f : files) {
                    DefaultMutableTreeNode childNode = new DefaultMutableTreeNode(f.getName());
                    node.add(childNode);

                    // ✅ Recursively add folders only (not files)
                    if (f.isDirectory()) {
                        populateFileTree(f, childNode);
                    }
                }
            }
        }
    }

    private void processFile(File fileName) {
        testCases = new ArrayList<>();
        try (FileInputStream file = new FileInputStream(fileName); Workbook workBook = new XSSFWorkbook(file)) {
            Sheet sheet = workBook.getSheetAt(0);
            Iterator<Row> rowIterator = sheet.iterator();
            if (rowIterator.hasNext()) {
                rowIterator.next();
            }
            if (rowIterator.hasNext()) {
                Row firstRowData = rowIterator.next();
                url = getCellValue(firstRowData.getCell(0));
                method = getCellValue(firstRowData.getCell(1));
                headers = getCellValue(firstRowData.getCell(2));
            }
            rowIterator = sheet.iterator();
            rowIterator.next();
            while (rowIterator.hasNext()) {
                Row row = rowIterator.next();
                String testName = getCellValue(row.getCell(3));
                String requestBodyStr = getCellValue(row.getCell(4));
                JSONObject requestBody;
                if (requestBodyStr.equalsIgnoreCase("Empty Request Body") || requestBodyStr.trim().isEmpty()) {
                    testCases.add(new Object[]{testName, requestBodyStr});
                } else {
                    requestBody = new JSONObject(requestBodyStr);
                    testCases.add(new Object[]{testName, requestBody});
                }
            }
            this.fileName = fileName.toString();
            showFileValues();
        } catch (FileNotFoundException ex) {
            showErrorDialog(ex);
            java.util.logging.Logger.getLogger(Screen1.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            showErrorDialog(ex);
            java.util.logging.Logger.getLogger(HomePage.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            showErrorDialog(ex);
            java.util.logging.Logger.getLogger(HomePage.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void showFileValues() {
        JTextArea textArea = new JTextArea();
        textArea.setEditable(false);  // Make read-only
        textArea.setFont(new Font("Monospaced", Font.PLAIN, 14));  // Improve readability
        textArea.setLineWrap(true);
        textArea.setWrapStyleWord(true);
        StringBuilder content = new StringBuilder();
        content.append("URL: ").append(url).append("\n");
        content.append("Method: ").append(method).append("\n");
        if (!headers.equals("")) {
            content.append("Headers: ").append(headers).append("\n\n");
        }
        if (!testCases.isEmpty()) {
            content.append("Test Cases:\n");
            testCases.stream().map((Object[] testCase) -> {
                content.append("Test Name: ").append(testCase[0]).append("\n");
                return testCase;
            }).forEachOrdered(testCase -> {
                content.append("Request Body: ").append(testCase[1].toString()).append("\n\n");
            });
        }
        textArea.setText(content.toString());
        existingTestDeatilsScrollPane.setViewportView(textArea);
        existingTestDeatilsScrollPane.revalidate();
        existingTestDeatilsScrollPane.repaint();
    }

    private static String getCellValue(Cell cell) {
        if (cell == null) {
            return "";
        }
        return switch (cell.getCellType()) {
            case STRING ->
                cell.getStringCellValue();
            case NUMERIC ->
                String.valueOf(cell.getNumericCellValue());
            case BOOLEAN ->
                String.valueOf(cell.getBooleanCellValue());
            case FORMULA ->
                cell.getCellFormula();
            default ->
                "";
        };
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HomePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HomePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HomePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HomePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new HomePage().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane existingTestDeatilsScrollPane;
    private javax.swing.JScrollPane existingTestListScrollPane;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JButton submitBtn;
    private javax.swing.JButton testBtn;
    private javax.swing.JPanel topPanel;
    // End of variables declaration//GEN-END:variables
}
