/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.elixr.apitestutility;

import static com.elixr.apitestutility.Screen2.showErrorDialog;
import java.awt.BorderLayout;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.logging.Level;
import javax.swing.JFrame;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import org.apache.poi.ss.usermodel.Cell;
import static org.apache.poi.ss.usermodel.CellType.BOOLEAN;
import static org.apache.poi.ss.usermodel.CellType.FORMULA;
import static org.apache.poi.ss.usermodel.CellType.NUMERIC;
import static org.apache.poi.ss.usermodel.CellType.STRING;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.json.JSONObject;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 *
 * @author sambit.sahu
 */
public class HomePage extends javax.swing.JFrame {

    private static final Logger logger = LoggerFactory.getLogger(HomePage.class);

    /**
     * Creates new form HomePage
     */
    public HomePage() {
        initComponents();
        setUpFrame();
    }

    private void setUpFrame() {
        setExtendedState(MAXIMIZED_BOTH);
        setLocationRelativeTo(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        exitBtn = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        createTest = new javax.swing.JMenu();
        existingTest = new javax.swing.JMenuItem();
        newTest = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setLocation(new java.awt.Point(0, 0));
        setMinimumSize(getPreferredSize());
        setResizable(false);

        jPanel1.setLayout(new java.awt.GridBagLayout());

        exitBtn.setText("EXIT");
        exitBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitBtnActionPerformed(evt);
            }
        });
        jPanel1.add(exitBtn, new java.awt.GridBagConstraints());

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel1.setText("API Test Utility");
        jPanel2.add(jLabel1);

        createTest.setText("Create Test");
        createTest.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        createTest.setMargin(new java.awt.Insets(10, 6, 3, 6));

        existingTest.setText("Use Existing Test");
        existingTest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                existingTestActionPerformed(evt);
            }
        });
        createTest.add(existingTest);

        newTest.setText("Create New Test");
        newTest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newTestActionPerformed(evt);
            }
        });
        createTest.add(newTest);

        jMenuBar1.add(createTest);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 397, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(16, 16, 16))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitBtnActionPerformed
        // TODO add your handling code here:
        logger.info("Exit button clicked.");
        int confirm = JOptionPane.showConfirmDialog(null, "Are you sure want to exit?");
        if (confirm == 0) {
            logger.info("User confirmed exit. Exiting application.");
            System.exit(0);
        } else {
            logger.info("User canceled exit.");
        }
    }//GEN-LAST:event_exitBtnActionPerformed

    private void newTestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newTestActionPerformed
        // TODO add your handling code here:
        Screen1 screen1 = new Screen1(this);
        screen1.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_newTestActionPerformed

    private void existingTestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_existingTestActionPerformed
        // TODO add your handling code here:
        openFileChooser();
    }//GEN-LAST:event_existingTestActionPerformed

    private void openFileChooser() {
        JFrame frame = new JFrame("Choose Test File");
        File currentDir = new File(System.getProperty("user.dir"));

        // Filter to show only Excel files (.xls and .xlsx)
        String[] excelFiles = currentDir.list((File dir, String name1) -> name1.toLowerCase().endsWith(".xls") || name1.toLowerCase().endsWith(".xlsx"));

        // Display message if no Excel files are found
        if (excelFiles == null || excelFiles.length == 0) {
            excelFiles = new String[]{"No Excel files found in this directory."};
        }

        // Display the filtered Excel files in the JList
        JList<String> fileList = new JList<>(excelFiles);
        JScrollPane scrollPane = new JScrollPane(fileList);

        // Action when an item is selected
        fileList.addListSelectionListener(e -> {
            if (!e.getValueIsAdjusting() && !fileList.getSelectedValue().equals("No Excel files found in this directory.")) {
                String selectedFile = fileList.getSelectedValue();
                processFile(selectedFile);
                frame.dispose();
            }
        });
        frame.add(scrollPane, BorderLayout.CENTER);
        frame.setSize(400, 300);
        frame.setLocationRelativeTo(this);
        frame.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        frame.setVisible(true);
    }

    private void processFile(String fileName) {
        String url = "";
        String method = "";
        String headers = "";
        List<Object[]> testCaseList = new ArrayList<>();
        try (FileInputStream file = new FileInputStream(fileName); Workbook workBook = new XSSFWorkbook(file)) {
            Sheet sheet = workBook.getSheetAt(0);
            Iterator<Row> rowIterator = sheet.iterator();
            if (rowIterator.hasNext()) {
                rowIterator.next();
            }
            if (rowIterator.hasNext()) {
                Row firstRowData = rowIterator.next();
                url = getCellValue(firstRowData.getCell(0));
                method = getCellValue(firstRowData.getCell(1));
                headers = getCellValue(firstRowData.getCell(2));
            }
            rowIterator = sheet.iterator();
            rowIterator.next();
            while (rowIterator.hasNext()) {
                Row row = rowIterator.next();
                String testName = getCellValue(row.getCell(3));
                String requestBodyStr = getCellValue(row.getCell(4));
                JSONObject requestBody;
                if (requestBodyStr.equalsIgnoreCase("Empty Request Body") || requestBodyStr.trim().isEmpty()) {
                    testCaseList.add(new Object[]{testName, requestBodyStr});
                } else {
                    requestBody = new JSONObject(requestBodyStr);
                    testCaseList.add(new Object[]{testName, requestBody});
                }
            }
            Object[][] testScenarios = testCaseList.toArray(new Object[0][0]);
            Screen3Frame screen3 = new Screen3Frame(this, url, method, headers, testScenarios, fileName);
            screen3.setVisible(true);
            dispose();
        } catch (FileNotFoundException ex) {
            showErrorDialog(ex);
            java.util.logging.Logger.getLogger(Screen1.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            showErrorDialog(ex);
            java.util.logging.Logger.getLogger(HomePage.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            showErrorDialog(ex);
            java.util.logging.Logger.getLogger(HomePage.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private static String getCellValue(Cell cell) {
        if (cell == null) {
            return "";
        }
        return switch (cell.getCellType()) {
            case STRING ->
                cell.getStringCellValue();
            case NUMERIC ->
                String.valueOf(cell.getNumericCellValue());
            case BOOLEAN ->
                String.valueOf(cell.getBooleanCellValue());
            case FORMULA ->
                cell.getCellFormula();
            default ->
                "";
        };
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HomePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HomePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HomePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HomePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new HomePage().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu createTest;
    private javax.swing.JMenuItem existingTest;
    private javax.swing.JButton exitBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JMenuItem newTest;
    // End of variables declaration//GEN-END:variables
}
